{"version":3,"sources":["components/User.js","components/EditUser.js","api.js","components/Users.js","App.js","serviceWorker.js","index.js"],"names":["User","props","className","user","selectedUser","onClick","onSelect","e","onDelete","id","name","password","EditUser","addingUser","type","placeholder","value","onChange","onCancel","onSave","usersAPI","get","Promise","resolve","reject","fetch","then","response","json","catch","err","create","method","body","JSON","stringify","headers","Accept","result","update","destroy","Users","state","users","handleSelect","bind","handleSave","handleCancel","handleChange","handleEnableAddMode","handleDelete","setState","this","event","stopPropagation","filter","h","console","log","push","target","map","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.bd8df58c.chunk.js","sourcesContent":["import React from 'react';\n\nconst User = props => {\n    return (\n        <li \n            className={props.user === props.selectedUser ? 'selected' : ''} \n            onClick={() => props.onSelect(props.user)}\n        >\n\n\n            <button\n                className=\"delete-button\"\n                onClick={e => props.onDelete(e, props.user)}\n            >\n                Delete\n            </button>\n            <div className=\"user-element\">\n                <div className=\"badge\">{props.user.id}</div>\n                <div className=\"name\">{props.user.name}</div>\n                <div className=\"password\">{props.user.password}</div>\n            </div>\n        </li>\n    );\n}\n\nexport default User;","import React from 'react';\n\nconst EditUser = props => {\n  if (props.selectedUser) {\n    return (\n      <div>\n        <div className=\"editfields\">\n          <div>\n            <label>id: </label>\n            {props.addingUser\n              ? <input\n                  type=\"number\"\n                  name=\"id\"\n                  placeholder=\"id\"\n                  value={props.selectedUser.id}\n                  onChange={props.onChange}\n                />\n              : <label className=\"value\">\n                  {props.selectedUser.id}\n                </label>}\n          </div>\n          <div>\n            <label>name: </label>\n            <input\n              name=\"name\"\n              value={props.selectedUser.name}\n              placeholder=\"name\"\n              onChange={props.onChange}\n            />\n          </div>\n          <div>\n            <label>password: </label>\n            <input\n              name=\"password\"\n              value={props.selectedUser.password}\n              placeholder=\"password\"\n              onChange={props.onChange}\n            />\n          </div>\n        </div>\n        <button onClick={props.onCancel}>Cancel</button>\n        <button onClick={props.onSave}>Save</button>\n      </div>\n    );\n  } else {\n    return <div />;\n  }\n};\n\nexport default EditUser;","const baseAPI = '/api';\n\nconst usersAPI = {\n  get() {\n    return new Promise((resolve, reject) => {\n      fetch(`${baseAPI}/users`)\n        .then(response => response.json())\n        .then(json => resolve(json))\n        .catch(err => {\n          reject(err);\n        });\n    });\n  },\n\n  create(user) {\n    return new Promise((resolve, reject) => {\n      fetch(`${baseAPI}/user`, {\n        method: 'POST',\n        body: JSON.stringify(user),\n        headers: {\n          Accept: 'application/json',\n          'Content-Type': 'application/json'\n        }\n      })\n        .then(result => result.json())\n        .then(json => resolve(json))\n        .catch(err => {\n          reject(err);\n        });\n    });\n  },\n\n  update(user) {\n    return new Promise((resolve, reject) => {\n      fetch(`${baseAPI}/user`, {\n        method: 'PUT',\n        body: JSON.stringify(user),\n        headers: {\n          Accept: 'application/json',\n          'Content-Type': 'application/json'\n        }\n      })\n        .then(result => {\n          resolve(result);\n        })\n        .catch(err => {\n          reject(err);\n        });\n    });\n  },\n\n  destroy(user) {\n    return new Promise((resolve, reject) => {\n      fetch(`${baseAPI}/user/${user.id}`, { method: 'DELETE' })\n        .then(response => response.json())\n        .then(json => resolve(json))\n        .catch(err => {\n          reject(err);\n        });\n    });\n  }\n};\n\nexport default usersAPI;","import React, { Component } from 'react';\n\nimport User from './User';\nimport EditUser from './EditUser';\nimport usersAPI from '../api';\n\n\n\nclass Users extends Component {\n    constructor() {\n        super();\n        this.state = { users: [], addingUser: false};\n\n        this.handleSelect = this.handleSelect.bind(this);\n        this.handleSave = this.handleSave.bind(this);\n        this.handleCancel = this.handleCancel.bind(this);\n        this.handleChange = this.handleChange.bind(this);\n        this.handleEnableAddMode = this.handleEnableAddMode.bind(this);\n        this.handleDelete = this.handleDelete.bind(this);\n\n    }\n    componentDidMount() {\n        usersAPI.get().then(json => this.setState({users:json}));\n    }\n    \n\n    handleSelect(user) {\n        this.setState({ selectedUser: user });\n    }\n\n    handleDelete(event, user) {\n        event.stopPropagation();\n        usersAPI.destroy(user).then(() => {\n            let users = this.state.users;\n            users = users.filter(h => h !== user);\n            this.setState({ users: users });\n    \n            if (this.selectedUser === user) {\n                this.setState({ selectedUser: null });\n            }\n        });\n    }\n\n    handleSave () {\n        let users = this.state.users;\n\n        if (this.state.addingUser) {\n        usersAPI\n            .create(this.state.selectedUser)\n            .then(result => {\n                console.log('Successfully created!');\n                users.push(this.state.selectedUser);\n                this.setState({\n                    users: users,\n                    selectedUser: null,\n                    addingUser: false\n                });\n            })\n            .catch(err => {\n                console.log(err);\n            });\n        } else {\n        usersAPI\n            .update(this.state.selectedUser)\n            .then(() => {\n                this.setState({ selectedUser: null });\n            })\n            .catch(err => {});\n    }\n  }\n\n    handleChange(event) {\n        let selectedUser = this.state.selectedUser;\n        selectedUser[event.target.name] = event.target.value;\n        this.setState({ selectedUser: selectedUser });\n\n    }\n\n    handleCancel() {\n        this.setState({ selectedUser: null, addingUser: false})\n    }\n\n    handleEnableAddMode() {\n        this.setState({\n            addingUser: true,\n            selectedUser: {id: '', name:'', password: ''}\n        });\n    }\n\n    \n\n\n    render() {\n        return (\n            <div>\n                <ul className=\"users\">\n                    {this.state.users.map(user =>{\n                        return <User \n                            user={user} \n                            onSelect={this.handleSelect} \n                            selectedUser = {this.state.selectedUser}\n                            onDelete={this.handleDelete} \n                        />\n                    })}\n                </ul>\n                <div className=\"editarea\">\n                    <button onClick={this.handleEnableAddMode}>Add New User</button>\n                    <EditUser \n                        addingUser = {this.state.addingUser} \n                        selectedUser={this.state.selectedUser}\n                        onChange={this.handleChange}\n                        onSave = {this.handleSave}\n                        onCancel = {this.handleCancel}\n                        \n                    />\n                </div>\n            </div>\n        );\n    }\n}\nexport default Users;","import React, { Component } from 'react';\n//import logo from './logo.svg';\nimport './App.css';\nimport Users from './components/Users';\n\nclass App extends Component {\n\n  render() {\n    return (\n      <div>\n        <h1>Users</h1>\n        <div className=\"header-bar\" />\n        <Users />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}